# -*- coding: utf-8 -*-
"""minimzation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P9leMtAOh_3wvqnYDaZG0fQ731SnWeez
"""

import pandas as pd
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

data=pd.read_csv('./i5dem.csv')

data

data = data["product;month_cons;inventory;rec_qte"].str.split(";", expand=True)

# Rename the columns
data.columns = ["product", "month_cons","inventory","rec_qte"]
data.to_csv('./modified_data.csv', index=False)

data

row_1106 = data.loc[439]

row_1106

res=data

data.to_csv('./mod_data.csv', index=False)

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()
data["encoded_product"] = label_encoder.fit_transform(data["product"])

data

uni_prod = data[["product", "encoded_product"]].drop_duplicates()

# Create a dictionary mapping product names to their encoded values
product_mapping = dict(zip(uni_prod["product"], uni_prod["encoded_product"]))



df=data

#df["inventory"] = pd.to_numeric(df["inventory"], errors="coerce")

#df["inventory"]=df["inventory"].astype(float)

df["month_cons"] = pd.to_numeric(df["month_cons"], errors="coerce")
df["month_cons"]=df["month_cons"].astype(float)
df["rec_qte"] = pd.to_numeric(df["rec_qte"], errors="coerce")
df["rec_qte"]=df["rec_qte"].astype(float)

df = df.dropna()

df

df["month_cons"].astype(float)

df["inventory"].astype(float)
df["rec_qte"].astype(float)

df = df.reset_index(drop=True)

data=df

data

df.drop("product",axis=1,inplace=True)

Y=df["rec_qte"]

Y

X=df.drop("rec_qte",axis=1)

X

import pickle
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Scale the features using StandardScaler
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
with open('scaler.pkl', 'wb') as f:
    pickle.dump(scaler, f)
# Build the regression model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(16, activation='relu', input_shape=(X_train_scaled.shape[1],)),
    tf.keras.layers.Dense(8, activation='relu'),

    tf.keras.layers.Dense(1)
])

X_test

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train_scaled, y_train, epochs=100, batch_size=16, verbose=0)

# Get predictions on new data
y_pred = model.predict(X_test_scaled)

# Print the predictions
print(y_pred)



print(y_test
      )

print(y_pred)

mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

mse

r2

y_test

ww=y_test.values

ww



ww[0]

l=[]
for i in range(len(ww)):
  l.append(abs(ww[i]-y_pred[i][0]))
print(max(l))

print(ww[4])
print(y_pred[4][0])

X_test

data

data[data['encoded_product']==248]

row_1106 = data.loc[801]

row_1106

"""product       Chicken Fajitas

month_cons             10.217
inventory               3.863
rec_qte                 2.586
"""

encoded_product = res.loc[res['product'] =="Light Sour Cream", 'encoded_product'].values[0]

encoded_product

from keras import models
import numpy as np

def get_predictions( month_cons, inventory, product,model=model, scaler=scaler):

    encoded_product = res.loc[res['product'] == product, 'encoded_product'].values[0]
    input_data = np.array([[month_cons, inventory, encoded_product]])


    scaled_input_data = scaler.transform(input_data)


    predictions = model.predict(scaled_input_data)
    return predictions

prediction = get_predictions(10.217,3.863,"Chicken Fajitas")
print("Predicted rec_qte:", prediction[0][0])

y_test

import pickle

pickle.dump(model,open('_model.pkl','wb'))
pickle.dump(res,open('dta.pkl','wb'))

pickle.dump(scaler,open('scaler.pkl','wb'))

